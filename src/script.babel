var body = d3.select("body");

var svg = d3.select("#svg_graph"),
    width = +svg.attr("width"),
    height = +svg.attr("height"); 

// Data sources provided by FCC
const EDUCATION_FILE = 'https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/for_user_education.json';
const COUNTY_FILE = 'https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json';
var path = d3.geoPath();

//Define legend with colored scheme
var color = d3.scaleThreshold()
    .domain([10, 20, 30, 40, 50, 60, 70, 80])
    .range(d3.schemePurples[9]);

const legWidth = 306;

const length = color.range().length;

const xScale = d3.scaleLinear()
      .domain([10, 80])
      .rangeRound([legWidth / length, legWidth * (length - 1) / length]);

var tooltip = body.append("div")
  .attr("class", "tooltip")
  .attr("id", "tooltip")
  .style("opacity", 0);

// Pull data into graph
d3.queue()
    .defer(d3.json, COUNTY_FILE)
    .defer(d3.json, EDUCATION_FILE)
    .await(ready);

function ready(error, us, education) {
  if (error) throw error;
  
  d3.select("#preloader").remove();
  
    svg.append("g")
    .selectAll("path")    
    .data(topojson.feature(us, us.objects.counties).features).enter()
    .append("path")
    .attr("fill", function(d) { 
        let result = education.filter(function( obj ) {
          return obj.fips == d.id;
        });
        if(result[0]){
          return color(result[0].bachelorsOrHigher)
        }
        //If could not find a matching fips~id in the data, return lightest color
        return color(0)
       })
    .attr("class", "county")
    .attr("data-fips", function(d) {
        return d.id
       })
    .attr("data-education", function(d) {
        let result = education.filter(function( obj ) {
          return obj.fips == d.id;
        });
        if(result[0]){
          return result[0].bachelorsOrHigher
        } else {
        //If could not find a matching fips~id in the data, return value 0
        console.log('could not find data for: ', d.id);
        return 0
        }
        })
    .on("mouseover", function(d) {      
        tooltip.style("opacity", 0.9)
               .style("left", (d3.event.pageX + 15) + "px") 
               .style("top", (d3.event.pageY - 30) + "px");
        tooltip.html(function() {
          let result = education.filter(function(obj) {
            return obj.fips == d.id;
          });
          if(result[0]){
            return result[0]['area_name'] + ', ' + result[0]['state'] + ': ' + result[0].bachelorsOrHigher + '%'
          }
          //If could not find a matching fips~id in the data
          return "no-data";
        })
        })
    .on("mouseout", function(d) { 
              tooltip.style("opacity", 0);
          })
    .attr("d", path);

  // Overlays the US state borders.
  svg.append("path")
    .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
    .attr("fill", "none")
    .attr("stroke", "blue")
    .attr("stroke-width", "1")
    .attr("stroke-linejoin", "round")
    .attr("class", "states")
    .attr("d", path);
 
  var g = svg.append("g")
    .attr("class", "key")
    .attr("id", "legend")
    .attr("transform", "translate(560,20)");
  g.selectAll("rect")
    .data(color.range())
    .enter()
    .append("rect")
    .attr("height", 15)
    .attr("x", (d, i) => xScale(i*10))
    .attr("width", legWidth / length)
    .attr("fill", d => d)
    .attr("stroke", "black"); 
  g.call(d3.axisBottom(xScale)
    .tickSize(20)
    .tickFormat(i => i + "%")
    .tickValues(color.domain()))
    .select(".domain")
    .remove();
  
 }
